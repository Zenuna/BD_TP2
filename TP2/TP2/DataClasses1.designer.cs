#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TP2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BD5B6TP2_JouaniquePerreault")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDependant(Dependant instance);
    partial void UpdateDependant(Dependant instance);
    partial void DeleteDependant(Dependant instance);
    partial void InsertDepense(Depense instance);
    partial void UpdateDepense(Depense instance);
    partial void DeleteDepense(Depense instance);
    partial void InsertPartiesJouee(PartiesJouee instance);
    partial void UpdatePartiesJouee(PartiesJouee instance);
    partial void DeletePartiesJouee(PartiesJouee instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertPrixDepensesAbonnement(PrixDepensesAbonnement instance);
    partial void UpdatePrixDepensesAbonnement(PrixDepensesAbonnement instance);
    partial void DeletePrixDepensesAbonnement(PrixDepensesAbonnement instance);
    partial void InsertReabonnement(Reabonnement instance);
    partial void UpdateReabonnement(Reabonnement instance);
    partial void DeleteReabonnement(Reabonnement instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertTerrain(Terrain instance);
    partial void UpdateTerrain(Terrain instance);
    partial void DeleteTerrain(Terrain instance);
    partial void InsertTypesAbonnement(TypesAbonnement instance);
    partial void UpdateTypesAbonnement(TypesAbonnement instance);
    partial void DeleteTypesAbonnement(TypesAbonnement instance);
    partial void InsertTypesEmploye(TypesEmploye instance);
    partial void UpdateTypesEmploye(TypesEmploye instance);
    partial void DeleteTypesEmploye(TypesEmploye instance);
    partial void InsertSexe(Sexe instance);
    partial void UpdateSexe(Sexe instance);
    partial void DeleteSexe(Sexe instance);
    partial void InsertEmploye(Employe instance);
    partial void UpdateEmploye(Employe instance);
    partial void DeleteEmploye(Employe instance);
    partial void InsertAbonnement(Abonnement instance);
    partial void UpdateAbonnement(Abonnement instance);
    partial void DeleteAbonnement(Abonnement instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::TP2.Properties.Settings.Default.BD5B6TP2_JouaniquePerreaultConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dependant> Dependants
		{
			get
			{
				return this.GetTable<Dependant>();
			}
		}
		
		public System.Data.Linq.Table<Depense> Depenses
		{
			get
			{
				return this.GetTable<Depense>();
			}
		}
		
		public System.Data.Linq.Table<PartiesJouee> PartiesJouees
		{
			get
			{
				return this.GetTable<PartiesJouee>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<PrixDepensesAbonnement> PrixDepensesAbonnements
		{
			get
			{
				return this.GetTable<PrixDepensesAbonnement>();
			}
		}
		
		public System.Data.Linq.Table<Reabonnement> Reabonnements
		{
			get
			{
				return this.GetTable<Reabonnement>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Terrain> Terrains
		{
			get
			{
				return this.GetTable<Terrain>();
			}
		}
		
		public System.Data.Linq.Table<TypesAbonnement> TypesAbonnements
		{
			get
			{
				return this.GetTable<TypesAbonnement>();
			}
		}
		
		public System.Data.Linq.Table<TypesEmploye> TypesEmployes
		{
			get
			{
				return this.GetTable<TypesEmploye>();
			}
		}
		
		public System.Data.Linq.Table<Sexe> Sexes
		{
			get
			{
				return this.GetTable<Sexe>();
			}
		}
		
		public System.Data.Linq.Table<Employe> Employes
		{
			get
			{
				return this.GetTable<Employe>();
			}
		}
		
		public System.Data.Linq.Table<Abonnement> Abonnements
		{
			get
			{
				return this.GetTable<Abonnement>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dependants")]
	public partial class Dependant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Nom;
		
		private string _Prenom;
		
		private char _Sexe;
		
		private System.DateTime _DateNaissance;
		
		private string _IdAbonnement;
		
		private string _Remarque;
		
		private EntityRef<Sexe> _Sexe1;
		
		private EntityRef<Abonnement> _Abonnement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnSexeChanging(char value);
    partial void OnSexeChanged();
    partial void OnDateNaissanceChanging(System.DateTime value);
    partial void OnDateNaissanceChanged();
    partial void OnIdAbonnementChanging(string value);
    partial void OnIdAbonnementChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Dependant()
		{
			this._Sexe1 = default(EntityRef<Sexe>);
			this._Abonnement = default(EntityRef<Abonnement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexe", DbType="Char(1) NOT NULL")]
		public char Sexe
		{
			get
			{
				return this._Sexe;
			}
			set
			{
				if ((this._Sexe != value))
				{
					if (this._Sexe1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexeChanging(value);
					this.SendPropertyChanging();
					this._Sexe = value;
					this.SendPropertyChanged("Sexe");
					this.OnSexeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNaissance", DbType="Date NOT NULL")]
		public System.DateTime DateNaissance
		{
			get
			{
				return this._DateNaissance;
			}
			set
			{
				if ((this._DateNaissance != value))
				{
					this.OnDateNaissanceChanging(value);
					this.SendPropertyChanging();
					this._DateNaissance = value;
					this.SendPropertyChanged("DateNaissance");
					this.OnDateNaissanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAbonnement", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string IdAbonnement
		{
			get
			{
				return this._IdAbonnement;
			}
			set
			{
				if ((this._IdAbonnement != value))
				{
					if (this._Abonnement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAbonnementChanging(value);
					this.SendPropertyChanging();
					this._IdAbonnement = value;
					this.SendPropertyChanged("IdAbonnement");
					this.OnIdAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sexe_Dependant", Storage="_Sexe1", ThisKey="Sexe", OtherKey="idSexe", IsForeignKey=true)]
		public Sexe Sexe1
		{
			get
			{
				return this._Sexe1.Entity;
			}
			set
			{
				Sexe previousValue = this._Sexe1.Entity;
				if (((previousValue != value) 
							|| (this._Sexe1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sexe1.Entity = null;
						previousValue.Dependants.Remove(this);
					}
					this._Sexe1.Entity = value;
					if ((value != null))
					{
						value.Dependants.Add(this);
						this._Sexe = value.idSexe;
					}
					else
					{
						this._Sexe = default(char);
					}
					this.SendPropertyChanged("Sexe1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_Dependant", Storage="_Abonnement", ThisKey="IdAbonnement", OtherKey="Id", IsForeignKey=true)]
		public Abonnement Abonnement
		{
			get
			{
				return this._Abonnement.Entity;
			}
			set
			{
				Abonnement previousValue = this._Abonnement.Entity;
				if (((previousValue != value) 
							|| (this._Abonnement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonnement.Entity = null;
						previousValue.Dependants.Remove(this);
					}
					this._Abonnement.Entity = value;
					if ((value != null))
					{
						value.Dependants.Add(this);
						this._IdAbonnement = value.Id;
					}
					else
					{
						this._IdAbonnement = default(string);
					}
					this.SendPropertyChanged("Abonnement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Depenses")]
	public partial class Depense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _No;
		
		private string _IdAbonnement;
		
		private System.DateTime _DateDepense;
		
		private decimal _Montant;
		
		private int _NoService;
		
		private string _Remarque;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Abonnement> _Abonnement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnIdAbonnementChanging(string value);
    partial void OnIdAbonnementChanged();
    partial void OnDateDepenseChanging(System.DateTime value);
    partial void OnDateDepenseChanged();
    partial void OnMontantChanging(decimal value);
    partial void OnMontantChanged();
    partial void OnNoServiceChanging(int value);
    partial void OnNoServiceChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Depense()
		{
			this._Service = default(EntityRef<Service>);
			this._Abonnement = default(EntityRef<Abonnement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAbonnement", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string IdAbonnement
		{
			get
			{
				return this._IdAbonnement;
			}
			set
			{
				if ((this._IdAbonnement != value))
				{
					if (this._Abonnement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAbonnementChanging(value);
					this.SendPropertyChanging();
					this._IdAbonnement = value;
					this.SendPropertyChanged("IdAbonnement");
					this.OnIdAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDepense", DbType="Date NOT NULL")]
		public System.DateTime DateDepense
		{
			get
			{
				return this._DateDepense;
			}
			set
			{
				if ((this._DateDepense != value))
				{
					this.OnDateDepenseChanging(value);
					this.SendPropertyChanging();
					this._DateDepense = value;
					this.SendPropertyChanged("DateDepense");
					this.OnDateDepenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Montant", DbType="Money NOT NULL")]
		public decimal Montant
		{
			get
			{
				return this._Montant;
			}
			set
			{
				if ((this._Montant != value))
				{
					this.OnMontantChanging(value);
					this.SendPropertyChanging();
					this._Montant = value;
					this.SendPropertyChanged("Montant");
					this.OnMontantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoService", DbType="Int NOT NULL")]
		public int NoService
		{
			get
			{
				return this._NoService;
			}
			set
			{
				if ((this._NoService != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoServiceChanging(value);
					this.SendPropertyChanging();
					this._NoService = value;
					this.SendPropertyChanged("NoService");
					this.OnNoServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Depense", Storage="_Service", ThisKey="NoService", OtherKey="No", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Depenses.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Depenses.Add(this);
						this._NoService = value.No;
					}
					else
					{
						this._NoService = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_Depense", Storage="_Abonnement", ThisKey="IdAbonnement", OtherKey="Id", IsForeignKey=true)]
		public Abonnement Abonnement
		{
			get
			{
				return this._Abonnement.Entity;
			}
			set
			{
				Abonnement previousValue = this._Abonnement.Entity;
				if (((previousValue != value) 
							|| (this._Abonnement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonnement.Entity = null;
						previousValue.Depenses.Remove(this);
					}
					this._Abonnement.Entity = value;
					if ((value != null))
					{
						value.Depenses.Add(this);
						this._IdAbonnement = value.Id;
					}
					else
					{
						this._IdAbonnement = default(string);
					}
					this.SendPropertyChanged("Abonnement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartiesJouees")]
	public partial class PartiesJouee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdAbonnement;
		
		private int _NoTerrain;
		
		private System.DateTime _DatePartie;
		
		private int _Pointage;
		
		private string _Remarque;
		
		private EntityRef<Terrain> _Terrain;
		
		private EntityRef<Abonnement> _Abonnement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAbonnementChanging(string value);
    partial void OnIdAbonnementChanged();
    partial void OnNoTerrainChanging(int value);
    partial void OnNoTerrainChanged();
    partial void OnDatePartieChanging(System.DateTime value);
    partial void OnDatePartieChanged();
    partial void OnPointageChanging(int value);
    partial void OnPointageChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public PartiesJouee()
		{
			this._Terrain = default(EntityRef<Terrain>);
			this._Abonnement = default(EntityRef<Abonnement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAbonnement", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdAbonnement
		{
			get
			{
				return this._IdAbonnement;
			}
			set
			{
				if ((this._IdAbonnement != value))
				{
					if (this._Abonnement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAbonnementChanging(value);
					this.SendPropertyChanging();
					this._IdAbonnement = value;
					this.SendPropertyChanged("IdAbonnement");
					this.OnIdAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoTerrain", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NoTerrain
		{
			get
			{
				return this._NoTerrain;
			}
			set
			{
				if ((this._NoTerrain != value))
				{
					if (this._Terrain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoTerrainChanging(value);
					this.SendPropertyChanging();
					this._NoTerrain = value;
					this.SendPropertyChanged("NoTerrain");
					this.OnNoTerrainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePartie", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DatePartie
		{
			get
			{
				return this._DatePartie;
			}
			set
			{
				if ((this._DatePartie != value))
				{
					this.OnDatePartieChanging(value);
					this.SendPropertyChanging();
					this._DatePartie = value;
					this.SendPropertyChanged("DatePartie");
					this.OnDatePartieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pointage", DbType="Int NOT NULL")]
		public int Pointage
		{
			get
			{
				return this._Pointage;
			}
			set
			{
				if ((this._Pointage != value))
				{
					this.OnPointageChanging(value);
					this.SendPropertyChanging();
					this._Pointage = value;
					this.SendPropertyChanged("Pointage");
					this.OnPointageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Terrain_PartiesJouee", Storage="_Terrain", ThisKey="NoTerrain", OtherKey="No", IsForeignKey=true)]
		public Terrain Terrain
		{
			get
			{
				return this._Terrain.Entity;
			}
			set
			{
				Terrain previousValue = this._Terrain.Entity;
				if (((previousValue != value) 
							|| (this._Terrain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Terrain.Entity = null;
						previousValue.PartiesJouees.Remove(this);
					}
					this._Terrain.Entity = value;
					if ((value != null))
					{
						value.PartiesJouees.Add(this);
						this._NoTerrain = value.No;
					}
					else
					{
						this._NoTerrain = default(int);
					}
					this.SendPropertyChanged("Terrain");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_PartiesJouee", Storage="_Abonnement", ThisKey="IdAbonnement", OtherKey="Id", IsForeignKey=true)]
		public Abonnement Abonnement
		{
			get
			{
				return this._Abonnement.Entity;
			}
			set
			{
				Abonnement previousValue = this._Abonnement.Entity;
				if (((previousValue != value) 
							|| (this._Abonnement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonnement.Entity = null;
						previousValue.PartiesJouees.Remove(this);
					}
					this._Abonnement.Entity = value;
					if ((value != null))
					{
						value.PartiesJouees.Add(this);
						this._IdAbonnement = value.Id;
					}
					else
					{
						this._IdAbonnement = default(string);
					}
					this.SendPropertyChanged("Abonnement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provinces")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Nom;
		
		private string _Remarque;
		
		private EntitySet<Employe> _Employes;
		
		private EntitySet<Abonnement> _Abonnements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Province()
		{
			this._Employes = new EntitySet<Employe>(new Action<Employe>(this.attach_Employes), new Action<Employe>(this.detach_Employes));
			this._Abonnements = new EntitySet<Abonnement>(new Action<Abonnement>(this.attach_Abonnements), new Action<Abonnement>(this.detach_Abonnements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Employe", Storage="_Employes", ThisKey="Id", OtherKey="IdProvince")]
		public EntitySet<Employe> Employes
		{
			get
			{
				return this._Employes;
			}
			set
			{
				this._Employes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Abonnement", Storage="_Abonnements", ThisKey="Id", OtherKey="IdProvince")]
		public EntitySet<Abonnement> Abonnements
		{
			get
			{
				return this._Abonnements;
			}
			set
			{
				this._Abonnements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employes(Employe entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Employes(Employe entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Abonnements(Abonnement entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Abonnements(Abonnement entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrixDepensesAbonnements")]
	public partial class PrixDepensesAbonnement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoTypeAbonnement;
		
		private int _Annee;
		
		private decimal _Prix;
		
		private decimal _DepensesObligatoires;
		
		private string _Remarque;
		
		private EntityRef<TypesAbonnement> _TypesAbonnement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoTypeAbonnementChanging(int value);
    partial void OnNoTypeAbonnementChanged();
    partial void OnAnneeChanging(int value);
    partial void OnAnneeChanged();
    partial void OnPrixChanging(decimal value);
    partial void OnPrixChanged();
    partial void OnDepensesObligatoiresChanging(decimal value);
    partial void OnDepensesObligatoiresChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public PrixDepensesAbonnement()
		{
			this._TypesAbonnement = default(EntityRef<TypesAbonnement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoTypeAbonnement", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NoTypeAbonnement
		{
			get
			{
				return this._NoTypeAbonnement;
			}
			set
			{
				if ((this._NoTypeAbonnement != value))
				{
					if (this._TypesAbonnement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoTypeAbonnementChanging(value);
					this.SendPropertyChanging();
					this._NoTypeAbonnement = value;
					this.SendPropertyChanged("NoTypeAbonnement");
					this.OnNoTypeAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Annee", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Annee
		{
			get
			{
				return this._Annee;
			}
			set
			{
				if ((this._Annee != value))
				{
					this.OnAnneeChanging(value);
					this.SendPropertyChanging();
					this._Annee = value;
					this.SendPropertyChanged("Annee");
					this.OnAnneeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prix", DbType="Money NOT NULL")]
		public decimal Prix
		{
			get
			{
				return this._Prix;
			}
			set
			{
				if ((this._Prix != value))
				{
					this.OnPrixChanging(value);
					this.SendPropertyChanging();
					this._Prix = value;
					this.SendPropertyChanged("Prix");
					this.OnPrixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepensesObligatoires", DbType="Money NOT NULL")]
		public decimal DepensesObligatoires
		{
			get
			{
				return this._DepensesObligatoires;
			}
			set
			{
				if ((this._DepensesObligatoires != value))
				{
					this.OnDepensesObligatoiresChanging(value);
					this.SendPropertyChanging();
					this._DepensesObligatoires = value;
					this.SendPropertyChanged("DepensesObligatoires");
					this.OnDepensesObligatoiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesAbonnement_PrixDepensesAbonnement", Storage="_TypesAbonnement", ThisKey="NoTypeAbonnement", OtherKey="No", IsForeignKey=true)]
		public TypesAbonnement TypesAbonnement
		{
			get
			{
				return this._TypesAbonnement.Entity;
			}
			set
			{
				TypesAbonnement previousValue = this._TypesAbonnement.Entity;
				if (((previousValue != value) 
							|| (this._TypesAbonnement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypesAbonnement.Entity = null;
						previousValue.PrixDepensesAbonnements.Remove(this);
					}
					this._TypesAbonnement.Entity = value;
					if ((value != null))
					{
						value.PrixDepensesAbonnements.Add(this);
						this._NoTypeAbonnement = value.No;
					}
					else
					{
						this._NoTypeAbonnement = default(int);
					}
					this.SendPropertyChanged("TypesAbonnement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reabonnements")]
	public partial class Reabonnement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdAbonnement;
		
		private System.DateTime _DateRenouvellement;
		
		private string _Remarque;
		
		private EntityRef<Abonnement> _Abonnement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAbonnementChanging(string value);
    partial void OnIdAbonnementChanged();
    partial void OnDateRenouvellementChanging(System.DateTime value);
    partial void OnDateRenouvellementChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Reabonnement()
		{
			this._Abonnement = default(EntityRef<Abonnement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAbonnement", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdAbonnement
		{
			get
			{
				return this._IdAbonnement;
			}
			set
			{
				if ((this._IdAbonnement != value))
				{
					if (this._Abonnement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAbonnementChanging(value);
					this.SendPropertyChanging();
					this._IdAbonnement = value;
					this.SendPropertyChanged("IdAbonnement");
					this.OnIdAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRenouvellement", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DateRenouvellement
		{
			get
			{
				return this._DateRenouvellement;
			}
			set
			{
				if ((this._DateRenouvellement != value))
				{
					this.OnDateRenouvellementChanging(value);
					this.SendPropertyChanging();
					this._DateRenouvellement = value;
					this.SendPropertyChanged("DateRenouvellement");
					this.OnDateRenouvellementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_Reabonnement", Storage="_Abonnement", ThisKey="IdAbonnement", OtherKey="Id", IsForeignKey=true)]
		public Abonnement Abonnement
		{
			get
			{
				return this._Abonnement.Entity;
			}
			set
			{
				Abonnement previousValue = this._Abonnement.Entity;
				if (((previousValue != value) 
							|| (this._Abonnement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonnement.Entity = null;
						previousValue.Reabonnements.Remove(this);
					}
					this._Abonnement.Entity = value;
					if ((value != null))
					{
						value.Reabonnements.Add(this);
						this._IdAbonnement = value.Id;
					}
					else
					{
						this._IdAbonnement = default(string);
					}
					this.SendPropertyChanged("Abonnement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _No;
		
		private string _TypeService;
		
		private int _NoEmploye;
		
		private string _Remarque;
		
		private EntitySet<Depense> _Depenses;
		
		private EntityRef<Employe> _Employe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnTypeServiceChanging(string value);
    partial void OnTypeServiceChanged();
    partial void OnNoEmployeChanging(int value);
    partial void OnNoEmployeChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Service()
		{
			this._Depenses = new EntitySet<Depense>(new Action<Depense>(this.attach_Depenses), new Action<Depense>(this.detach_Depenses));
			this._Employe = default(EntityRef<Employe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeService", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeService
		{
			get
			{
				return this._TypeService;
			}
			set
			{
				if ((this._TypeService != value))
				{
					this.OnTypeServiceChanging(value);
					this.SendPropertyChanging();
					this._TypeService = value;
					this.SendPropertyChanged("TypeService");
					this.OnTypeServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoEmploye", DbType="Int NOT NULL")]
		public int NoEmploye
		{
			get
			{
				return this._NoEmploye;
			}
			set
			{
				if ((this._NoEmploye != value))
				{
					if (this._Employe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoEmployeChanging(value);
					this.SendPropertyChanging();
					this._NoEmploye = value;
					this.SendPropertyChanged("NoEmploye");
					this.OnNoEmployeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Depense", Storage="_Depenses", ThisKey="No", OtherKey="NoService")]
		public EntitySet<Depense> Depenses
		{
			get
			{
				return this._Depenses;
			}
			set
			{
				this._Depenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employe_Service", Storage="_Employe", ThisKey="NoEmploye", OtherKey="No", IsForeignKey=true)]
		public Employe Employe
		{
			get
			{
				return this._Employe.Entity;
			}
			set
			{
				Employe previousValue = this._Employe.Entity;
				if (((previousValue != value) 
							|| (this._Employe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employe.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Employe.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._NoEmploye = value.No;
					}
					else
					{
						this._NoEmploye = default(int);
					}
					this.SendPropertyChanged("Employe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Depenses(Depense entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Depenses(Depense entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Terrains")]
	public partial class Terrain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _No;
		
		private string _Nom;
		
		private int _NombreTrous;
		
		private string _Description;
		
		private string _Remarque;
		
		private EntitySet<PartiesJouee> _PartiesJouees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnNombreTrousChanging(int value);
    partial void OnNombreTrousChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Terrain()
		{
			this._PartiesJouees = new EntitySet<PartiesJouee>(new Action<PartiesJouee>(this.attach_PartiesJouees), new Action<PartiesJouee>(this.detach_PartiesJouees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NombreTrous", DbType="Int NOT NULL")]
		public int NombreTrous
		{
			get
			{
				return this._NombreTrous;
			}
			set
			{
				if ((this._NombreTrous != value))
				{
					this.OnNombreTrousChanging(value);
					this.SendPropertyChanging();
					this._NombreTrous = value;
					this.SendPropertyChanged("NombreTrous");
					this.OnNombreTrousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Terrain_PartiesJouee", Storage="_PartiesJouees", ThisKey="No", OtherKey="NoTerrain")]
		public EntitySet<PartiesJouee> PartiesJouees
		{
			get
			{
				return this._PartiesJouees;
			}
			set
			{
				this._PartiesJouees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartiesJouees(PartiesJouee entity)
		{
			this.SendPropertyChanging();
			entity.Terrain = this;
		}
		
		private void detach_PartiesJouees(PartiesJouee entity)
		{
			this.SendPropertyChanging();
			entity.Terrain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypesAbonnement")]
	public partial class TypesAbonnement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _No;
		
		private string _Description;
		
		private string _Remarque;
		
		private EntitySet<PrixDepensesAbonnement> _PrixDepensesAbonnements;
		
		private EntitySet<Abonnement> _Abonnements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public TypesAbonnement()
		{
			this._PrixDepensesAbonnements = new EntitySet<PrixDepensesAbonnement>(new Action<PrixDepensesAbonnement>(this.attach_PrixDepensesAbonnements), new Action<PrixDepensesAbonnement>(this.detach_PrixDepensesAbonnements));
			this._Abonnements = new EntitySet<Abonnement>(new Action<Abonnement>(this.attach_Abonnements), new Action<Abonnement>(this.detach_Abonnements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesAbonnement_PrixDepensesAbonnement", Storage="_PrixDepensesAbonnements", ThisKey="No", OtherKey="NoTypeAbonnement")]
		public EntitySet<PrixDepensesAbonnement> PrixDepensesAbonnements
		{
			get
			{
				return this._PrixDepensesAbonnements;
			}
			set
			{
				this._PrixDepensesAbonnements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesAbonnement_Abonnement", Storage="_Abonnements", ThisKey="No", OtherKey="NoTypeAbonnement")]
		public EntitySet<Abonnement> Abonnements
		{
			get
			{
				return this._Abonnements;
			}
			set
			{
				this._Abonnements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrixDepensesAbonnements(PrixDepensesAbonnement entity)
		{
			this.SendPropertyChanging();
			entity.TypesAbonnement = this;
		}
		
		private void detach_PrixDepensesAbonnements(PrixDepensesAbonnement entity)
		{
			this.SendPropertyChanging();
			entity.TypesAbonnement = null;
		}
		
		private void attach_Abonnements(Abonnement entity)
		{
			this.SendPropertyChanging();
			entity.TypesAbonnement = this;
		}
		
		private void detach_Abonnements(Abonnement entity)
		{
			this.SendPropertyChanging();
			entity.TypesAbonnement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypesEmploye")]
	public partial class TypesEmploye : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _No;
		
		private string _Description;
		
		private string _Remarque;
		
		private EntitySet<Employe> _Employes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public TypesEmploye()
		{
			this._Employes = new EntitySet<Employe>(new Action<Employe>(this.attach_Employes), new Action<Employe>(this.detach_Employes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesEmploye_Employe", Storage="_Employes", ThisKey="No", OtherKey="NoTypeEmploye")]
		public EntitySet<Employe> Employes
		{
			get
			{
				return this._Employes;
			}
			set
			{
				this._Employes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employes(Employe entity)
		{
			this.SendPropertyChanging();
			entity.TypesEmploye = this;
		}
		
		private void detach_Employes(Employe entity)
		{
			this.SendPropertyChanging();
			entity.TypesEmploye = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sexe")]
	public partial class Sexe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _idSexe;
		
		private string _Description;
		
		private EntitySet<Dependant> _Dependants;
		
		private EntitySet<Employe> _Employes;
		
		private EntitySet<Abonnement> _Abonnements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSexeChanging(char value);
    partial void OnidSexeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Sexe()
		{
			this._Dependants = new EntitySet<Dependant>(new Action<Dependant>(this.attach_Dependants), new Action<Dependant>(this.detach_Dependants));
			this._Employes = new EntitySet<Employe>(new Action<Employe>(this.attach_Employes), new Action<Employe>(this.detach_Employes));
			this._Abonnements = new EntitySet<Abonnement>(new Action<Abonnement>(this.attach_Abonnements), new Action<Abonnement>(this.detach_Abonnements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSexe", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char idSexe
		{
			get
			{
				return this._idSexe;
			}
			set
			{
				if ((this._idSexe != value))
				{
					this.OnidSexeChanging(value);
					this.SendPropertyChanging();
					this._idSexe = value;
					this.SendPropertyChanged("idSexe");
					this.OnidSexeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sexe_Dependant", Storage="_Dependants", ThisKey="idSexe", OtherKey="Sexe")]
		public EntitySet<Dependant> Dependants
		{
			get
			{
				return this._Dependants;
			}
			set
			{
				this._Dependants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sexe_Employe", Storage="_Employes", ThisKey="idSexe", OtherKey="Sexe")]
		public EntitySet<Employe> Employes
		{
			get
			{
				return this._Employes;
			}
			set
			{
				this._Employes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sexe_Abonnement", Storage="_Abonnements", ThisKey="idSexe", OtherKey="Sexe")]
		public EntitySet<Abonnement> Abonnements
		{
			get
			{
				return this._Abonnements;
			}
			set
			{
				this._Abonnements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Sexe1 = this;
		}
		
		private void detach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Sexe1 = null;
		}
		
		private void attach_Employes(Employe entity)
		{
			this.SendPropertyChanging();
			entity.Sexe1 = this;
		}
		
		private void detach_Employes(Employe entity)
		{
			this.SendPropertyChanging();
			entity.Sexe1 = null;
		}
		
		private void attach_Abonnements(Abonnement entity)
		{
			this.SendPropertyChanging();
			entity.Sexe1 = this;
		}
		
		private void detach_Abonnements(Abonnement entity)
		{
			this.SendPropertyChanging();
			entity.Sexe1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employes")]
	public partial class Employe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _No;
		
		private string _MotDePasse;
		
		private string _Nom;
		
		private string _Prenom;
		
		private char _Sexe;
		
		private int _Age;
		
		private int _NoCivique;
		
		private string _Rue;
		
		private string _Ville;
		
		private string _IdProvince;
		
		private string _CodePostal;
		
		private string _Telephone;
		
		private string _Cellulaire;
		
		private string _Courriel;
		
		private decimal _SalaireHoraire;
		
		private int _NoTypeEmploye;
		
		private string _Remarque;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<TypesEmploye> _TypesEmploye;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<Sexe> _Sexe1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnMotDePasseChanging(string value);
    partial void OnMotDePasseChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnSexeChanging(char value);
    partial void OnSexeChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnNoCiviqueChanging(int value);
    partial void OnNoCiviqueChanged();
    partial void OnRueChanging(string value);
    partial void OnRueChanged();
    partial void OnVilleChanging(string value);
    partial void OnVilleChanged();
    partial void OnIdProvinceChanging(string value);
    partial void OnIdProvinceChanged();
    partial void OnCodePostalChanging(string value);
    partial void OnCodePostalChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnCellulaireChanging(string value);
    partial void OnCellulaireChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnSalaireHoraireChanging(decimal value);
    partial void OnSalaireHoraireChanged();
    partial void OnNoTypeEmployeChanging(int value);
    partial void OnNoTypeEmployeChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Employe()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._TypesEmploye = default(EntityRef<TypesEmploye>);
			this._Province = default(EntityRef<Province>);
			this._Sexe1 = default(EntityRef<Sexe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotDePasse", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MotDePasse
		{
			get
			{
				return this._MotDePasse;
			}
			set
			{
				if ((this._MotDePasse != value))
				{
					this.OnMotDePasseChanging(value);
					this.SendPropertyChanging();
					this._MotDePasse = value;
					this.SendPropertyChanged("MotDePasse");
					this.OnMotDePasseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexe", DbType="Char(1) NOT NULL")]
		public char Sexe
		{
			get
			{
				return this._Sexe;
			}
			set
			{
				if ((this._Sexe != value))
				{
					if (this._Sexe1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexeChanging(value);
					this.SendPropertyChanging();
					this._Sexe = value;
					this.SendPropertyChanged("Sexe");
					this.OnSexeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoCivique", DbType="Int NOT NULL")]
		public int NoCivique
		{
			get
			{
				return this._NoCivique;
			}
			set
			{
				if ((this._NoCivique != value))
				{
					this.OnNoCiviqueChanging(value);
					this.SendPropertyChanging();
					this._NoCivique = value;
					this.SendPropertyChanged("NoCivique");
					this.OnNoCiviqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rue", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Rue
		{
			get
			{
				return this._Rue;
			}
			set
			{
				if ((this._Rue != value))
				{
					this.OnRueChanging(value);
					this.SendPropertyChanging();
					this._Rue = value;
					this.SendPropertyChanged("Rue");
					this.OnRueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ville", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Ville
		{
			get
			{
				return this._Ville;
			}
			set
			{
				if ((this._Ville != value))
				{
					this.OnVilleChanging(value);
					this.SendPropertyChanging();
					this._Ville = value;
					this.SendPropertyChanged("Ville");
					this.OnVilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProvince", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string IdProvince
		{
			get
			{
				return this._IdProvince;
			}
			set
			{
				if ((this._IdProvince != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProvinceChanging(value);
					this.SendPropertyChanging();
					this._IdProvince = value;
					this.SendPropertyChanged("IdProvince");
					this.OnIdProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodePostal", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string CodePostal
		{
			get
			{
				return this._CodePostal;
			}
			set
			{
				if ((this._CodePostal != value))
				{
					this.OnCodePostalChanging(value);
					this.SendPropertyChanging();
					this._CodePostal = value;
					this.SendPropertyChanged("CodePostal");
					this.OnCodePostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cellulaire", DbType="VarChar(10)")]
		public string Cellulaire
		{
			get
			{
				return this._Cellulaire;
			}
			set
			{
				if ((this._Cellulaire != value))
				{
					this.OnCellulaireChanging(value);
					this.SendPropertyChanging();
					this._Cellulaire = value;
					this.SendPropertyChanged("Cellulaire");
					this.OnCellulaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaireHoraire", DbType="Money NOT NULL")]
		public decimal SalaireHoraire
		{
			get
			{
				return this._SalaireHoraire;
			}
			set
			{
				if ((this._SalaireHoraire != value))
				{
					this.OnSalaireHoraireChanging(value);
					this.SendPropertyChanging();
					this._SalaireHoraire = value;
					this.SendPropertyChanged("SalaireHoraire");
					this.OnSalaireHoraireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoTypeEmploye", DbType="Int NOT NULL")]
		public int NoTypeEmploye
		{
			get
			{
				return this._NoTypeEmploye;
			}
			set
			{
				if ((this._NoTypeEmploye != value))
				{
					if (this._TypesEmploye.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoTypeEmployeChanging(value);
					this.SendPropertyChanging();
					this._NoTypeEmploye = value;
					this.SendPropertyChanged("NoTypeEmploye");
					this.OnNoTypeEmployeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employe_Service", Storage="_Services", ThisKey="No", OtherKey="NoEmploye")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesEmploye_Employe", Storage="_TypesEmploye", ThisKey="NoTypeEmploye", OtherKey="No", IsForeignKey=true)]
		public TypesEmploye TypesEmploye
		{
			get
			{
				return this._TypesEmploye.Entity;
			}
			set
			{
				TypesEmploye previousValue = this._TypesEmploye.Entity;
				if (((previousValue != value) 
							|| (this._TypesEmploye.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypesEmploye.Entity = null;
						previousValue.Employes.Remove(this);
					}
					this._TypesEmploye.Entity = value;
					if ((value != null))
					{
						value.Employes.Add(this);
						this._NoTypeEmploye = value.No;
					}
					else
					{
						this._NoTypeEmploye = default(int);
					}
					this.SendPropertyChanged("TypesEmploye");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Employe", Storage="_Province", ThisKey="IdProvince", OtherKey="Id", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Employes.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Employes.Add(this);
						this._IdProvince = value.Id;
					}
					else
					{
						this._IdProvince = default(string);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sexe_Employe", Storage="_Sexe1", ThisKey="Sexe", OtherKey="idSexe", IsForeignKey=true)]
		public Sexe Sexe1
		{
			get
			{
				return this._Sexe1.Entity;
			}
			set
			{
				Sexe previousValue = this._Sexe1.Entity;
				if (((previousValue != value) 
							|| (this._Sexe1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sexe1.Entity = null;
						previousValue.Employes.Remove(this);
					}
					this._Sexe1.Entity = value;
					if ((value != null))
					{
						value.Employes.Add(this);
						this._Sexe = value.idSexe;
					}
					else
					{
						this._Sexe = default(char);
					}
					this.SendPropertyChanged("Sexe1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Employe = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Employe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abonnements")]
	public partial class Abonnement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.DateTime _DateAbonnement;
		
		private string _Nom;
		
		private string _Prenom;
		
		private char _Sexe;
		
		private System.DateTime _DateNaissance;
		
		private int _NoCivique;
		
		private string _Rue;
		
		private string _Ville;
		
		private string _IdProvince;
		
		private string _CodePostal;
		
		private string _Telephone;
		
		private string _Cellulaire;
		
		private string _Courriel;
		
		private int _NoTypeAbonnement;
		
		private string _Remarque;
		
		private EntitySet<Dependant> _Dependants;
		
		private EntitySet<Depense> _Depenses;
		
		private EntitySet<PartiesJouee> _PartiesJouees;
		
		private EntitySet<Reabonnement> _Reabonnements;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<TypesAbonnement> _TypesAbonnement;
		
		private EntityRef<Sexe> _Sexe1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDateAbonnementChanging(System.DateTime value);
    partial void OnDateAbonnementChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnSexeChanging(char value);
    partial void OnSexeChanged();
    partial void OnDateNaissanceChanging(System.DateTime value);
    partial void OnDateNaissanceChanged();
    partial void OnNoCiviqueChanging(int value);
    partial void OnNoCiviqueChanged();
    partial void OnRueChanging(string value);
    partial void OnRueChanged();
    partial void OnVilleChanging(string value);
    partial void OnVilleChanged();
    partial void OnIdProvinceChanging(string value);
    partial void OnIdProvinceChanged();
    partial void OnCodePostalChanging(string value);
    partial void OnCodePostalChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnCellulaireChanging(string value);
    partial void OnCellulaireChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnNoTypeAbonnementChanging(int value);
    partial void OnNoTypeAbonnementChanged();
    partial void OnRemarqueChanging(string value);
    partial void OnRemarqueChanged();
    #endregion
		
		public Abonnement()
		{
			this._Dependants = new EntitySet<Dependant>(new Action<Dependant>(this.attach_Dependants), new Action<Dependant>(this.detach_Dependants));
			this._Depenses = new EntitySet<Depense>(new Action<Depense>(this.attach_Depenses), new Action<Depense>(this.detach_Depenses));
			this._PartiesJouees = new EntitySet<PartiesJouee>(new Action<PartiesJouee>(this.attach_PartiesJouees), new Action<PartiesJouee>(this.detach_PartiesJouees));
			this._Reabonnements = new EntitySet<Reabonnement>(new Action<Reabonnement>(this.attach_Reabonnements), new Action<Reabonnement>(this.detach_Reabonnements));
			this._Province = default(EntityRef<Province>);
			this._TypesAbonnement = default(EntityRef<TypesAbonnement>);
			this._Sexe1 = default(EntityRef<Sexe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAbonnement", DbType="Date NOT NULL")]
		public System.DateTime DateAbonnement
		{
			get
			{
				return this._DateAbonnement;
			}
			set
			{
				if ((this._DateAbonnement != value))
				{
					this.OnDateAbonnementChanging(value);
					this.SendPropertyChanging();
					this._DateAbonnement = value;
					this.SendPropertyChanged("DateAbonnement");
					this.OnDateAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexe", DbType="Char(1) NOT NULL")]
		public char Sexe
		{
			get
			{
				return this._Sexe;
			}
			set
			{
				if ((this._Sexe != value))
				{
					if (this._Sexe1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexeChanging(value);
					this.SendPropertyChanging();
					this._Sexe = value;
					this.SendPropertyChanged("Sexe");
					this.OnSexeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNaissance", DbType="Date NOT NULL")]
		public System.DateTime DateNaissance
		{
			get
			{
				return this._DateNaissance;
			}
			set
			{
				if ((this._DateNaissance != value))
				{
					this.OnDateNaissanceChanging(value);
					this.SendPropertyChanging();
					this._DateNaissance = value;
					this.SendPropertyChanged("DateNaissance");
					this.OnDateNaissanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoCivique", DbType="Int NOT NULL")]
		public int NoCivique
		{
			get
			{
				return this._NoCivique;
			}
			set
			{
				if ((this._NoCivique != value))
				{
					this.OnNoCiviqueChanging(value);
					this.SendPropertyChanging();
					this._NoCivique = value;
					this.SendPropertyChanged("NoCivique");
					this.OnNoCiviqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Rue
		{
			get
			{
				return this._Rue;
			}
			set
			{
				if ((this._Rue != value))
				{
					this.OnRueChanging(value);
					this.SendPropertyChanging();
					this._Rue = value;
					this.SendPropertyChanged("Rue");
					this.OnRueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ville", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Ville
		{
			get
			{
				return this._Ville;
			}
			set
			{
				if ((this._Ville != value))
				{
					this.OnVilleChanging(value);
					this.SendPropertyChanging();
					this._Ville = value;
					this.SendPropertyChanged("Ville");
					this.OnVilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProvince", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string IdProvince
		{
			get
			{
				return this._IdProvince;
			}
			set
			{
				if ((this._IdProvince != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProvinceChanging(value);
					this.SendPropertyChanging();
					this._IdProvince = value;
					this.SendPropertyChanged("IdProvince");
					this.OnIdProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodePostal", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string CodePostal
		{
			get
			{
				return this._CodePostal;
			}
			set
			{
				if ((this._CodePostal != value))
				{
					this.OnCodePostalChanging(value);
					this.SendPropertyChanging();
					this._CodePostal = value;
					this.SendPropertyChanged("CodePostal");
					this.OnCodePostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cellulaire", DbType="VarChar(10)")]
		public string Cellulaire
		{
			get
			{
				return this._Cellulaire;
			}
			set
			{
				if ((this._Cellulaire != value))
				{
					this.OnCellulaireChanging(value);
					this.SendPropertyChanging();
					this._Cellulaire = value;
					this.SendPropertyChanged("Cellulaire");
					this.OnCellulaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoTypeAbonnement", DbType="Int NOT NULL")]
		public int NoTypeAbonnement
		{
			get
			{
				return this._NoTypeAbonnement;
			}
			set
			{
				if ((this._NoTypeAbonnement != value))
				{
					if (this._TypesAbonnement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoTypeAbonnementChanging(value);
					this.SendPropertyChanging();
					this._NoTypeAbonnement = value;
					this.SendPropertyChanged("NoTypeAbonnement");
					this.OnNoTypeAbonnementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarque", DbType="VarChar(50)")]
		public string Remarque
		{
			get
			{
				return this._Remarque;
			}
			set
			{
				if ((this._Remarque != value))
				{
					this.OnRemarqueChanging(value);
					this.SendPropertyChanging();
					this._Remarque = value;
					this.SendPropertyChanged("Remarque");
					this.OnRemarqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_Dependant", Storage="_Dependants", ThisKey="Id", OtherKey="IdAbonnement")]
		public EntitySet<Dependant> Dependants
		{
			get
			{
				return this._Dependants;
			}
			set
			{
				this._Dependants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_Depense", Storage="_Depenses", ThisKey="Id", OtherKey="IdAbonnement")]
		public EntitySet<Depense> Depenses
		{
			get
			{
				return this._Depenses;
			}
			set
			{
				this._Depenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_PartiesJouee", Storage="_PartiesJouees", ThisKey="Id", OtherKey="IdAbonnement")]
		public EntitySet<PartiesJouee> PartiesJouees
		{
			get
			{
				return this._PartiesJouees;
			}
			set
			{
				this._PartiesJouees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonnement_Reabonnement", Storage="_Reabonnements", ThisKey="Id", OtherKey="IdAbonnement")]
		public EntitySet<Reabonnement> Reabonnements
		{
			get
			{
				return this._Reabonnements;
			}
			set
			{
				this._Reabonnements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Abonnement", Storage="_Province", ThisKey="IdProvince", OtherKey="Id", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Abonnements.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Abonnements.Add(this);
						this._IdProvince = value.Id;
					}
					else
					{
						this._IdProvince = default(string);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesAbonnement_Abonnement", Storage="_TypesAbonnement", ThisKey="NoTypeAbonnement", OtherKey="No", IsForeignKey=true)]
		public TypesAbonnement TypesAbonnement
		{
			get
			{
				return this._TypesAbonnement.Entity;
			}
			set
			{
				TypesAbonnement previousValue = this._TypesAbonnement.Entity;
				if (((previousValue != value) 
							|| (this._TypesAbonnement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypesAbonnement.Entity = null;
						previousValue.Abonnements.Remove(this);
					}
					this._TypesAbonnement.Entity = value;
					if ((value != null))
					{
						value.Abonnements.Add(this);
						this._NoTypeAbonnement = value.No;
					}
					else
					{
						this._NoTypeAbonnement = default(int);
					}
					this.SendPropertyChanged("TypesAbonnement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sexe_Abonnement", Storage="_Sexe1", ThisKey="Sexe", OtherKey="idSexe", IsForeignKey=true)]
		public Sexe Sexe1
		{
			get
			{
				return this._Sexe1.Entity;
			}
			set
			{
				Sexe previousValue = this._Sexe1.Entity;
				if (((previousValue != value) 
							|| (this._Sexe1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sexe1.Entity = null;
						previousValue.Abonnements.Remove(this);
					}
					this._Sexe1.Entity = value;
					if ((value != null))
					{
						value.Abonnements.Add(this);
						this._Sexe = value.idSexe;
					}
					else
					{
						this._Sexe = default(char);
					}
					this.SendPropertyChanged("Sexe1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = this;
		}
		
		private void detach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = null;
		}
		
		private void attach_Depenses(Depense entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = this;
		}
		
		private void detach_Depenses(Depense entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = null;
		}
		
		private void attach_PartiesJouees(PartiesJouee entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = this;
		}
		
		private void detach_PartiesJouees(PartiesJouee entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = null;
		}
		
		private void attach_Reabonnements(Reabonnement entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = this;
		}
		
		private void detach_Reabonnements(Reabonnement entity)
		{
			this.SendPropertyChanging();
			entity.Abonnement = null;
		}
	}
}
#pragma warning restore 1591
